#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt

from scipy import interpolate

def correction(value):
    x = [0.504,0.603,0.696,0.807,0.928,1.084,1.193,1.305,1.418,1.496,1.596,1.710,1.820,1.900,2.019,2.133,2.233,2.323,2.434,2.523,2.640,2.739,2.856,2.971,3.066,3.166,3.249,3.351,3.451,3.568,3.665,3.740,3.875,3.910,4.108,4.232,4.261,4.355,4.300,4.490,4.554]
    #y = [0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,3.10,3.20,3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00]
    y = [0.454,0.503,0.496,0.507,0.528,0.584,0.593,0.605,0.618,0.596,0.596,0.610,0.620,0.600,0.619,0.633,0.633,0.623,0.634,0.623,0.640,0.639,0.656,0.671,0.666,0.666,0.649,0.651,0.651,0.668,0.665,0.640,0.675,0.610,0.708,0.732,0.661,0.655,0.500,0.590,0.554]
    f = interpolate.interp1d(x, y, kind='linear')

    if value >= x[0] and value <= x[-1]:
        return value - f(value)
    else:
        return value - 0.615

def main():
    #x = [0.504,0.603,0.696,0.807,0.928,1.084,1.193,1.305,1.418,1.496,1.596,1.710,1.820,1.900,2.019,2.133,2.233,2.323,2.434,2.523,2.640,2.739,2.856,2.971,3.066,3.166,3.249,3.351,3.451,3.568,3.665,3.740,3.875,3.910,4.108,4.232,4.261,4.355,4.300,4.490,4.554]
    #y = [0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.10,1.20,1.30,1.40,1.50,1.60,1.70,1.80,1.90,2.00,2.10,2.20,2.30,2.40,2.50,2.60,2.70,2.80,2.90,3.00,3.10,3.20,3.30,3.40,3.50,3.60,3.70,3.80,3.90,4.00]
    #y = [0.454,0.503,0.496,0.507,0.528,0.584,0.593,0.605,0.618,0.596,0.596,0.610,0.620,0.600,0.619,0.633,0.633,0.623,0.634,0.623,0.640,0.639,0.656,0.671,0.666,0.666,0.649,0.651,0.651,0.668,0.665,0.640,0.675,0.610,0.708,0.732,0.661,0.655,0.500,0.590,0.554]
    #f = interpolate.interp1d(x, y, kind='linear')

    #xnew = np.linspace(0.504, 4.554, num=410, endpoint=True)
    #plt.plot(xnew, correction(xnew), '-')
    #plt.legend(['data', 'linear'], loc='best')
    #plt.show()


if __name__ == '__main__':
    main()


